basePath: /api/v1
definitions:
  models.ChangePasswordRequest:
    properties:
      confirm_password:
        example: newsecurepassword123
        type: string
      current_password:
        example: currentpassword123
        type: string
      new_password:
        example: newsecurepassword123
        maxLength: 100
        minLength: 8
        type: string
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  models.CreateTodoRequest:
    properties:
      deadline:
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - deadline
    - title
    type: object
  models.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: securepassword123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.RecoverPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: securepassword123
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.RegisterResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      success:
        example: true
        type: boolean
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      new_password:
        example: newsecurepassword123
        minLength: 8
        type: string
      token:
        example: recovery_token_123
        type: string
    required:
    - new_password
    - token
    type: object
  models.UpdateProfileRequest:
    properties:
      email:
        example: john.updated@example.com
        type: string
      username:
        example: john_doe_updated
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - username
    type: object
  models.UpdateTodoRequest:
    properties:
      completed:
        type: boolean
      deadline:
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  models.UserAccount:
    properties:
      user_id:
        type: string
      user_role:
        $ref: '#/definitions/models.UserRoleEnum'
    type: object
  models.UserRoleEnum:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - UserRole
  responses.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: https://www.youtube.com/watch?v=KsB99Sf_fX0
    name: API Support
    url: https://www.youtube.com/watch?v=KsB99Sf_fX0
  description: This is a sample Todo API server built with Go Fiber
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Backend Todo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Authentication
  /auth/recover-password:
    post:
      consumes:
      - application/json
      description: Send password reset email
      parameters:
      - description: Recovery email data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RecoverPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Password recovery
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: User registration
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with recovery token
      parameters:
      - description: Password reset data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Reset password
      tags:
      - Authentication
  /auth/verify-email/{token}:
    get:
      consumes:
      - application/json
      description: Verify user email with verification token
      parameters:
      - description: Email verification token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Verify email address
      tags:
      - Authentication
  /todos:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of todos for the authenticated user with
        optional filters
      parameters:
      - description: 'Number of items per page (default: 10)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Filter by completion status
        in: query
        name: completed
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of todos
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user's todos with pagination and filters
      tags:
      - Todos
    post:
      consumes:
      - application/json
      description: Create a new todo item for the authenticated user
      parameters:
      - description: Todo creation data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Todo created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new todo
      tags:
      - Todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a todo item
      parameters:
      - description: Todo ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Todo deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid todo ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - cannot delete other user's todo
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Todo not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete todo
      tags:
      - Todos
    get:
      consumes:
      - application/json
      description: Retrieve a specific todo item by its unique identifier
      parameters:
      - description: Todo ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Todo information
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid todo ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - cannot access other user's todo
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Todo not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get todo by ID
      tags:
      - Todos
    put:
      consumes:
      - application/json
      description: Update an existing todo item's information
      parameters:
      - description: Todo ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Todo update data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Todo updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data or todo ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - cannot update other user's todo
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Todo not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update todo
      tags:
      - Todos
  /todos/{id}/toggle:
    patch:
      consumes:
      - application/json
      description: Toggle the completion status of a todo item (completed/incomplete)
      parameters:
      - description: Todo ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Todo status toggled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid todo ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - cannot modify other user's todo
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Todo not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Toggle todo completion status
      tags:
      - Todos
  /todos/stats:
    get:
      consumes:
      - application/json
      description: Retrieve statistics about user's todos (total, completed, incomplete)
      produces:
      - application/json
      responses:
        "200":
          description: Todo statistics
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get todo statistics
      tags:
      - Todos
  /todos/status/{status}:
    get:
      consumes:
      - application/json
      description: Retrieve todos filtered by their completion status (completed or
        incomplete)
      parameters:
      - description: Todo status
        enum:
        - completed
        - incomplete
        in: path
        name: status
        required: true
        type: string
      - description: 'Number of items per page (default: 10)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Filtered todos
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid status parameter
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get todos by completion status
      tags:
      - Todos
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all users in the system
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Search users by username or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of users
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid pagination parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - admin access required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a user account and all associated data
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfully deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - cannot delete other user's account or admin required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a user's information by their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/models.UserAccount'
        "400":
          description: Invalid user ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user's profile information such as username, email, or other
        details
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user information
          schema:
            $ref: '#/definitions/models.UserAccount'
        "400":
          description: Invalid request data or user ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - cannot update other user's data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict - username or email already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - Users
  /users/change-password:
    put:
      consumes:
      - application/json
      description: Change the password for the currently authenticated user
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request data or weak password
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - current password is incorrect
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the profile information of the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Current user profile
          schema:
            $ref: '#/definitions/models.UserAccount'
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the profile information of the currently authenticated user
      parameters:
      - description: Profile update data
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/models.UserAccount'
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict - username or email already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Enter JWT token with Bearer prefix (e.g., Bearer your_token_here)
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
